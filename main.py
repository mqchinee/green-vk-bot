from vkbottle import API
from vkbottle.bot import Bot, Message, rules
import random
import bs4, requests
from bs4 import BeautifulSoup
import sys
import wikipedia
import json
import aiomojang
import asyncio
import sqlite3
import time
from threading import Thread
import schedule
from simpledemotivators import Demotivator, Quote
from vkbottle import PhotoMessageUploader
import os
import io
from io import BytesIO
import contextlib
from aioconsole import aexec
from utils import http
from PIL import Image, ImageFilter, ImageDraw, ImageFont
import urllib.request, urllib.parse, re
import fandom

def main_loop():
	thread = Thread(target=do_schedule)
	thread.start()

def NAME():
	db = sqlite3.connect('data.db')
	cursor = db.cursor()
	cursor.execute("UPDATE botdata SET cooldown = ? WHERE cooldown = ?", (0, 1))
	db.commit()
	cursor.close()
	db.close()
	print('–û—á–∏—Å—Ç–∏–ª–∏ –ö–î!')

def do_schedule():
	schedule.every().day.at("23:00").do(NAME)
	while True:
		schedule.run_pending()
		time.sleep(1)

wikipedia.set_lang("RU")

bot = Bot(token="ur token")
bot.labeler.vbml_ignore_case = True
watermark = '–ì—Ä–∏–Ω–º–∞—à–∏–Ω'
arrange = True
groupid = 213174308

bot.labeler.message_view.replace_mention = True

meeting = "–ü—Ä–∏–≤–µ—Ç, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –±–µ—Å–µ–¥—É!"

dir_to_txt = 'Genb/id'

@bot.on.chat_message(text=".–ø–∏—Å—é–Ω")
async def chat_game_handler(message: Message):
	user = await bot.api.users.get(message.from_id)
	db = sqlite3.connect('data.db')
	cursor = db.cursor()
	pom1 = [1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3]
	pom = random.choice(pom1)
	cursor.execute("SELECT user FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
	data = cursor.fetchone()
	cursor.execute("SELECT cm FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
	data3 = cursor.fetchone()
	cursor.execute("SELECT cooldown FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
	data4 = cursor.fetchone()
	amount = 0
	start = random.randint(1,25)
	startm = random.randint(3,20)
	startmega = random.randint(50,120)
	if data is None:
		cursor.execute("INSERT INTO botdata(cm, cooldown, id, user) VALUES(?,?,?,?)", (start, 1, message.peer_id, user[0].id,))
		await message.reply(f"–ö–æ–∑–∞—á–µ, —Ç–≤–æ—è –ø—ñ—Å—å–∫–∞ –æ—Ç—Ä–∏–º–∞–ª–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—ñ—Å—Ç –≤ {start} —Å–º! –ë–∞–∂–∞—é —Ç–æ–±—ñ —É—Å–ø—ñ—Ö—ñ–≤!")
	elif data3[0] < amount:
		cursor.execute("DELETE FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
		await message.reply(f"–ö–æ–∑–∞—á–µ, —Ç–≤–æ—è –ø—ñ—Å—å–∫–∞ –≤—ñ–¥–≤–∞–ª–∏–ª–∞—Å—è :(")
	else:
		if data4[0] == 1:
			await message.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç–∏ –≤–∂–µ –≥—Ä–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ!\n(–ö–æ–∂–µ–Ω –¥–µ–Ω—å –≤ 7:00 (GMT+3) –≤–µ—Å—å –∫—É–ª–¥–∞—É–Ω –æ—á–∏—â–∞—î—Ç—å—Å—è!)')
		elif data4[0] == 0:
			if pom == 1:
				cursor.execute("SELECT cm FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				data1 = cursor.fetchone()
				cursor.execute(f"UPDATE botdata SET cm = cm + {start} WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				await message.reply(f"–ö–æ–∑–∞—á–µ, —Ç–≤–æ—è –ø—ñ—Å—å–∫–∞ –≤–∏—Ä—ñ—Å–ª–∞ –Ω–∞ {start} —Å–º. –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!")
				cursor.execute(f"UPDATE botdata SET cooldown = ? WHERE id = ? AND user = ?", (1, message.peer_id, user[0].id,))
			elif pom == 2: 
				cursor.execute("SELECT cm FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				data1 = cursor.fetchone()
				cursor.execute(f"UPDATE botdata SET cm = cm - {startm} WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				await message.reply(f"–ö–æ–∑–∞—á–µ, —Ç–≤–æ—è –ø—ñ—Å—å–∫–∞ –∑–º–µ–Ω—à–∏–ª–∞—Å—è –Ω–∞ {startm} —Å–º. –ë—ñ–¥–Ω–µ–Ω—å–∫–∏–π!")
				cursor.execute(f"UPDATE botdata SET cooldown = ? WHERE id = ? AND user = ?", (1, message.peer_id, user[0].id,))
			elif pom == 3:
				cursor.execute("SELECT cm FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				data1 = cursor.fetchone()
				cursor.execute(f"UPDATE botdata SET cm = cm + {startmega} WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
				await message.reply(f"–ö–û–ó–ê–ß–ï, –¢–ò –û–¢–†–ò–ú–ê–í –ú–ï–ì–ê-–†–Ü–°–¢! –¢–≤–æ—è –ø—ñ—Å—å–∫–∞ –≤–∏—Ä–æ—Å–ª–∞ –Ω–∞ {startmega} —Å–º.")
				cursor.execute(f"UPDATE botdata SET cooldown = ? WHERE id = ? AND user = ?", (1, message.peer_id, user[0].id,))

	db.commit()
	cursor.close()
	db.close()

@bot.on.chat_message(text=".–º–æ–π_–ø–∏—Å—é–Ω")
async def chat_game_handler2(message: Message):
	user = await bot.api.users.get(message.from_id)
	db = sqlite3.connect('data.db')
	cursor = db.cursor()
	cursor.execute("SELECT cm FROM botdata WHERE id = ? AND user = ?", (message.peer_id, user[0].id,))
	data = cursor.fetchone()
	start = random.randint(0,15)
	if data is None:
		await message.reply(f"–ö–æ–∑–∞—á–µ, –≤ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—ñ—Å—å–∫–∏! –ù–∞–ø–∏—à–∏ .–ø–∏—Å—é–Ω, —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ü—é –ø–æ–º–∏–ª–∫—É!")
	else:
		await message.reply(f"–ö–æ–∑–∞—á–µ, —Ç–≤–æ—è –ø—ñ—Å—å–∫–∞ –º–∞—î —Ä–æ–∑–º—ñ—Ä {str(data[0])} —Å–º!")
	db.commit()
	cursor.close()
	db.close()

@bot.on.chat_message(text=".—Ç–æ–ø")
async def chat_game_handler24(message: Message):
	top = []
	db = sqlite3.connect('data.db')
	cursor = db.cursor()
	counter = 1
	for row in cursor.execute("SELECT user, id, cm FROM botdata WHERE id = ? ORDER BY cm DESC LIMIT 30", (message.peer_id,)):
		user2 = await bot.api.users.get(row[0])
		top.append(f"#{counter} {user2[0].first_name} {user2[0].last_name} - {row[2]} —Å–º.\n")
		query = "".join(top)
		counter += 1
	await message.reply(f"–¢–æ–ø 30 –∏–≥—Ä–æ–∫–æ–≤!\n\n{query}")
	db.commit()
	cursor.close()
	db.close()

@bot.on.chat_message(mention=True)
async def mention_handler(message: Message):
	user = await bot.api.users.get(message.from_id)
	await message.reply(f"@id{user[0].id} ({user[0].first_name}), –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ - .–ø–æ–º–æ—â—å")

@bot.on.chat_message(text=[".test",".—Ç–µ—Å—Ç"])
async def chat_message_handler(message: Message):
	user = await bot.api.users.get(message.from_id)
	if user[0].id == 567447984:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}). Hello, World! Command: {message.text}")
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=[".—Å–∫–∞–∂–∏ <text>",".—Å–∫–∞–∂–∏"])
async def chat_message_handler(message: Message, text=None):
	user = await bot.api.users.get(message.from_id)
	if user[0].id == 567447984:
		if text is not None:
			await message.answer(f"{text}")
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=[".—Ä–æ–ª–ª",".roll"])
async def e8ball2(message: Message):
	user = await bot.api.users.get(message.from_id)
	await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}) –±—Ä–æ—Å–∏–ª(–∞) –∫–æ—Å—Ç–∏.\nüé≤ –í—ã–ø–∞–ª–æ: {random.randint(1,6)}!")

@bot.on.chat_message(text=[".—à–∞—Ä <question>",".—à–∞—Ä"])
async def e8ball(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	choice = ['–Ø –≤–∏–∂—É... –¥–∞! ‚úÖ','–Ø –≤–∏–∂—É... –Ω–µ—Ç! üö´','–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å –æ–± —ç—Ç–æ–º. ‚ùì','–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç. üö´','–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.. ‚ùì','–ù–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Å—è –Ω–∞ —ç—Ç–æ–º. ‚ùì','–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! ‚ùì','–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç! üö´','–ö–æ–Ω–µ—á–Ω–æ! ‚úÖ','–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ - –¥–∞! ‚úÖ','–î–∞. ‚úÖ','–ú–æ—ë –º–Ω–µ–Ω–∏–µ - –¥–∞! ‚úÖ','–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ - –Ω–µ—Ç. üö´','–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π! üö´']
	if question is not None:
		await message.reply(f"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä! üîÆ\n@id{user[0].id} ({user[0].first_name}), —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: \n{question}\n\n–ú–æ–π –æ—Ç–≤–µ—Ç:\n{random.choice(choice)}")
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–æ–ø—Ä–æ—Å!")

@bot.on.chat_message(text=[".—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å <question>",".—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"])
async def e8ball3(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	if question is not None:
		await message.reply(f"üíû @id{user[0].id} ({user[0].first_name}), —Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º(–∞) —Å {question} –Ω–∞ {random.randint(0, 100)}%")
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!")

@bot.on.chat_message(text=[".–Ω–∞—Å–∫–æ–ª—å–∫–æ <question>",".–Ω–∞—Å–∫–æ–ª—å–∫–æ"])
async def e8ball3434(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	if question is not None:
		if question.startswith('-'):
			await message.reply(f"üé≤ {question[1:100000]} –Ω–∞ {random.randint(0, 101)}%")
		else:
			await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Ç—ã {question} –Ω–∞ {random.randint(0, 101)}%")		
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!")

@bot.on.chat_message(text=[".–≤–∏–∫–∏ <question>",".–≤–∏–∫–∏"])
async def e8ball3342(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	idlist = [585988117, 447956362] # 447956362
	if user[0].id in idlist:
		await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Ç–µ–±–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n–û—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Å—å –∫ @mqchinee")
	else:
		if question is not None:
			try:
				query = "".join(question)
				searchs = wikipedia.search(query,results = 1)
				page = wikipedia.page(searchs)
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), –≤–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n{str(wikipedia.summary(query)[:1000])}. . .\n\n–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å: {question}\n–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ: {page.url}")
			except wikipedia.exceptions.DisambiguationError:
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ú–æ–∂–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ?")
			except wikipedia.exceptions.PageError:
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			except wikipedia.exceptions.WikipediaException:
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
			except requests.exceptions.ProxyError:
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		else:
			await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!")

@bot.on.chat_message(text=[".–ø–æ–º–æ—â—å <page>",".–ø–æ–º–æ—â—å"])
async def e8ball1(message: Message, page=None):
	user = await bot.api.users.get(message.from_id)
	if page is None:
		await message.reply(f"‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É! –ù–∞–ø—Ä–∏–º–µ—Ä: .–ø–æ–º–æ—â—å 1\n–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: [5]\n\nüö´ –í–µ—Ä—Å–∏—è: 1.2.1 üö´")
	elif page == "1":
		await message.reply(f"üîÆ –ú–µ–Ω—é –ø–æ–º–æ—â–∏ [1/5]:\n\n–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚ùó .—à–∞—Ä [–≤–∞—à_–≤–æ–ø—Ä–æ—Å] - –æ—Ç–≤–µ—á—É –≤–∞–º –Ω–∞ –ª—é–±–æ–π –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n‚ùó .—Ä–æ–ª–ª - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏.\n‚ùó .–∞–Ω–µ–∫–¥–æ—Ç - —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –≤–∞—Å! (–∏—Å—Ç–æ—á–Ω–∏–∫: http://rzhunemogu.ru/)\n‚ùó .—Ä–∞–∑—Ä–∞–± - –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.\n‚ùó .—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å [–∞—Ä–≥—É–º–µ–Ω—Ç] - –ø—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!\n‚ùó .–≤–∏–∫–∏ [–∑–∞–ø—Ä–æ—Å] - –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å —Å—Ç–∞—Ç—å—é –≤ Wikipedia\n‚ùó .–Ω–∏–∫ [–Ω–∏–∫] - –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ Minecraft\n‚ùó .–Ω–∞—Å–∫–æ–ª—å–∫–æ [–∞—Ä–≥—É–º–µ–Ω—Ç] –∏–ª–∏ [-–∞—Ä–≥—É–º–µ–Ω—Ç (–±–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ '—Ç—ã')] - —É–∑–Ω–∞—Ç—å, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ç—ã (—Ç–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç).\n‚ùó .covid [—Å—Ç—Ä–∞–Ω–∞_eng] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ covid-19 –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.\n‚ùó .yt [–∑–∞–ø—Ä–æ—Å] - –Ω–∞–π–¥—É –≤–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É (YouTube).\n‚ùó .–º–∞–π–Ω–≤–∏–∫–∏ [–∑–∞–ø—Ä–æ—Å] - –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å —Å—Ç–∞—Ç—å—é –≤ Fandom (Minecraft)")
	elif page == "2":
		await message.reply(f"üîÆ –ú–µ–Ω—é –ø–æ–º–æ—â–∏ [2/5]:\n\n–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n‚ùó .—Å–∫–∞–∂–∏ - –ø–æ–≤—Ç–æ—Ä—é —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n‚ùó .ddb - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã.\n‚ùó .–∞–≥–µ–Ω_–≤–∫–ª - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\n‚ùó .–∞–≥–µ–Ω_–≤—ã–∫–ª - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\n‚ùó .ghoul - —è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à—É, –Ω–µ –∑–∞–±—ã–≤–∞–π –º–µ–Ω—è...\n‚ùó .eval [–∫–æ–¥] - –∑–∞–ø—É—â—É –∫–æ–¥.")
	elif page == "3":
		await message.reply(f"üîÆ –ú–µ–Ω—é –ø–æ–º–æ—â–∏ [3/5]:\n\n–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –¥–ª—è —Ñ–∞–Ω–∞ :D)\n‚ùó .–ø–∏—Å—é–Ω - –≥–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä—ã\n‚ùó .–º–æ–π_–ø–∏—Å—é–Ω - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚ùó .—Ç–æ–ø - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ (30)\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 (GMT+3) –∫—É–ª–¥–∞—É–Ω –æ—á–∏—â–∞–µ—Ç—Å—è —É –≤—Å–µ—Ö!")
	elif page == "4":
		await message.reply(f"üîÆ –ú–µ–Ω—é –ø–æ–º–æ—â–∏ [4/5]:\n\n–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏: \n‚ùó .–¥–µ–º [—Ç–µ–∫—Å—Ç1]\n[—Ç–µ–∫—Å—Ç 2] - —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä. (–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ª–∏–±–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π)\n‚ùó .—Ü - —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ç–∞—Ç—É. (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å)\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Ç–æ–≥–¥–∞ –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–ü—Ä–æ—á–µ–µ:\n‚ùó .cat\n‚ùó .duck \n‚ùó .wanted\n‚ùó .wtf \n‚ùó .rip (—Ç–µ–∫—Å—Ç)\n‚ùó .fire")
	elif page == "5":
		await message.reply(f"üîÆ –ú–µ–Ω—é –ø–æ–º–æ—â–∏ [5/5]:\n\n–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑:\n‚ùó .–≤–∞–π–ø - –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n‚ùó .–∏–Ω—Ñ–æ - —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–ª–æ–≤\n‚ùó .–≥–µ–Ω_–≤–∫–ª - –≤–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\n‚ùó .–≥–µ–Ω_–≤—ã–∫–ª - –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ, –∏–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö, —Å–æ—Å—Ç–∞–≤–ª—è—è –∏–∑ –Ω–∏—Ö —Ñ—Ä–∞–∑—ã. –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–Ω—è—Ç—å –∞–∫—Ç–∏–≤ –≤ –±–µ—Å–µ–¥–µ.")
	else:
		await message.reply(f"‚ùó –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç, —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É! –ù–∞–ø—Ä–∏–º–µ—Ä: .–ø–æ–º–æ—â—å 1\n–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: [5]\n\nüö´ –í–µ—Ä—Å–∏—è: 1.2.1 üö´")

@bot.on.chat_message(text=[".–∞–Ω–µ–∫–¥–æ—Ç",".—Å–º–µ—à–Ω—è–≤–∞"])
async def e8ball11(message: Message):
	user = await bot.api.users.get(message.from_id)
	response = requests.get('http://rzhunemogu.ru/')
	soup = BeautifulSoup(response.text, 'html.parser')
	text = soup.find(id='ctl00_ContentPlaceHolder1_Accordion1_Pane_0_content_LabelText').getText()
	try:
		await message.reply(f"üòÄ @id{user[0].id} ({user[0].first_name}), —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è —Ç–µ–±—è:\n\n----*\n{text}\n*----")
	except requests.exceptions.ProxyError:
		await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@bot.on.chat_message(text=[".—Ä–∞–∑—Ä–∞–±",".—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"])
async def e8ball1244(message: Message):
	user = await bot.api.users.get(message.from_id)
	await message.reply(f"üé≤ –ú–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:\n@mqchinee (–ù–∏–∫–∏—Ç–∞ –õ–µ—Å–Ω–æ–π)!")

@bot.on.chat_message(text=[".–Ω–∏–∫ <question>",".–Ω–∏–∫"])
async def e8ball35(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	player = question
	if question is not None:
		try:
			profile = aiomojang.Player(player)
			skin = aiomojang.Skin(player)
			nicks = []
			i = 1 
			for x in await profile.get_history():
				nicks.append(f"–ò–º—è #{i}: {x['name']}\n")
				i = i + 1
			names = "".join(nicks)
			await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), –≤–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É {player}:\n\n–ù–∏–∫–Ω–µ–π–º: {await aiomojang.Player(await profile.uuid).name}\n\nUUID: {await profile.uuid}\nSKIN: {await skin.url}\n–ò—Å—Ç–æ—Ä–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤:\n {str(names)}")
		except aiomojang.exceptions.ApiException:
			await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!")


@bot.on.message(text=['.–¥–µ–º <text1>\n<text2>', '.–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä <text1>\n<text2>', '.dem <text1>\n<text2>'])
async def dem(ans: Message, text1=None, text2=None):
	try:
		if text1 and text2 == None:
			ans.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
		else:
			if ans.reply_message is not None:

				if ans.reply_message.attachments:
					image_url = ans.reply_message.attachments[0].photo.sizes[-5].url
					img_data = requests.get(image_url).content
					with open('demimg.jpg', 'wb') as handler:
						handler.write(img_data)
					dem = Demotivator(text1, text2)
					dem.create('demimg.jpg', arrange=arrange)
					photo_upd = PhotoMessageUploader(bot.api)
					photo = await photo_upd.upload("demresult.jpg")
					await ans.reply('–í–æ—Ç —Ç–≤–æ—ë —Ñ–æ—Ç–æ:', attachment=photo)

			elif ans.attachments is not None:
				image_url = ans.attachments[0].photo.sizes[-5].url
				img_data = requests.get(image_url).content
				with open('demimg.jpg', 'wb') as handler:
					handler.write(img_data)
				dem = Demotivator(text1, text2)
				dem.create('demimg.jpg', arrange=arrange)
				photo_upd = PhotoMessageUploader(bot.api)
				photo = await photo_upd.upload("demresult.jpg")
				await ans.reply('–í–æ—Ç —Ç–≤–æ—ë —Ñ–æ—Ç–æ:', attachment=photo)
	except IndexError:
		await ans.reply('–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

@bot.on.message(text='.—Ü')
async def quote(ans: Message):
	try:
		group_id = ans.reply_message.from_id
		user_ava = await bot.api.users.get(user_ids=ans.reply_message.from_id, fields='photo_max')
		user_photo = user_ava[0].photo_max
		name = user_ava[0].first_name + ' ' + user_ava[0].last_name
		img_data = requests.get(user_photo).content
		with open('userphoto.jpg', 'wb') as handler:
			handler.write(img_data)
		dem = Quote(ans.reply_message.text, name)
		photo = dem.create(user_photo, use_url=True, quote_text_size=45)
		photo_upd = PhotoMessageUploader(bot.api)
		photo = await photo_upd.upload("qresult.png")
		await ans.reply("", attachment=photo)
	except:
		group_id = ans.reply_message.from_id * (-1)
		user_ava = await bot.api.groups.get_by_id(group_id=group_id)
		user_photo = user_ava[0].photo_200
		name = user_ava[0].name
		img_data = requests.get(user_photo).content
		with open('userphoto.jpg', 'wb') as handler:
			handler.write(img_data)
		dem = Quote(ans.reply_message.text, name)
		photo = dem.create(user_photo, use_url=True, quote_text_size=45, headline_text='–¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –±–æ—Ç–æ–≤')
		photo_upd = PhotoMessageUploader(bot.api)
		photo = await photo_upd.upload("qresult.png")
		await ans.reply("", attachment=photo)

async def check(ans, id: int) -> bool:
	items = (await bot.api.messages.get_conversations_by_id(peer_ids=ans.peer_id)).items
	if not items:
		return False
	chat_settings = items[0].chat_settings
	admins = []
	admins.extend(chat_settings.admin_ids)
	admins.append(chat_settings.owner_id)
	return id in admins

async def addtobd(peerid):
	if not os.path.exists(dir_to_txt + str(peerid) + '.txt'):
		f = open(dir_to_txt + str(peerid) + '.txt', 'w', encoding='utf8')
		f.write('')
		f.close()

@bot.on.chat_message(rules.ChatActionRule('chat_invite_user'))
async def on_bot_invite(ans: Message):
	await addtobd(ans.peer_id)
	await ans.answer(meeting)

@bot.on.chat_message(text=['.ddb'])
async def adddbd(ans: Message):
	user = await bot.api.users.get(ans.from_id)
	if user[0].id == 567447984:
		await addtobd(ans.peer_id)
		await ans.reply(f"@mqchinee (–ì–æ—Å–ø–æ–¥–∏–Ω), –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –±–∞–∑—É –¥–∏–∞–ª–æ–≥–æ–≤! dialogs{str(ans.peer_id)}.txt")
	else:
		await ans.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=['.info', '.–∏–Ω—Ñ–æ'])
async def info(ans: Message):
	await addtobd(ans.peer_id)
	with open(dir_to_txt + str(ans.peer_id) + '.txt', encoding="utf8") as file:
		txt = file.read().split(",")
	await ans.reply(f'–°–æ—Ö—Ä–∞–Ω–∏–ª —Å–ª–æ–≤: {len(txt)}')

@bot.on.chat_message(text=['.–≤–∞–π–ø'])
async def wipe(ans: Message):
	await addtobd(ans.peer_id)
	if not await check(ans, id=ans.from_id):
		await ans.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã')
	else:
		f = open(dir_to_txt + str(ans.peer_id) + '.txt', 'w', encoding='utf8')
		f.write('')
		f.close()
		await ans.reply('–ë–∞–∑–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.')

@bot.on.chat_message(text=['.–≥–µ–Ω_–≤–∫–ª'])
async def wipeon(message: Message):
	if not await check(message, id=message.from_id):
		await message.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã')
	else:
		db = sqlite3.connect('status.db')
		cursor = db.cursor()
		cursor.execute("SELECT status FROM onoff WHERE id = ?", (message.peer_id,))
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO onoff(status, id) VALUES(?,?)", (1, message.peer_id,))
			await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 0:
			cursor.execute("UPDATE onoff SET status = ? WHERE id = ?", (1, message.peer_id,))
			await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 1:
			await message.reply("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
		db.commit()
		cursor.close()
		db.close()

@bot.on.chat_message(text=['.–≥–µ–Ω_–≤—ã–∫–ª'])
async def wipeoff(message: Message):
	if not await check(message, id=message.from_id):
		await message.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã')
	else:
		db = sqlite3.connect('status.db')
		cursor = db.cursor()
		cursor.execute("SELECT status FROM onoff WHERE id = ?", (message.peer_id,))
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO onoff(status, id) VALUES(?,?)", (0, message.peer_id,))
			await message.reply("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 1:
			cursor.execute("UPDATE onoff SET status = ? WHERE id = ?", (0, message.peer_id,))
			await message.reply("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 0:
			await message.reply("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
		db.commit()
		cursor.close()
		db.close()

@bot.on.chat_message(text=['.–∞–≥–µ–Ω_–≤–∫–ª'])
async def wipeon1(message: Message):
	user = await bot.api.users.get(message.from_id)
	if user[0].id == 567447984:
		db = sqlite3.connect('status.db')
		cursor = db.cursor()
		cursor.execute("SELECT status FROM onoff WHERE id = ?", (message.peer_id,))
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO onoff(status, id) VALUES(?,?)", (1, message.peer_id,))
			await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 0:
			cursor.execute("UPDATE onoff SET status = ? WHERE id = ?", (1, message.peer_id,))
			await message.reply("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 1:
			await message.reply("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
		db.commit()
		cursor.close()
		db.close()
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=['.–∞–≥–µ–Ω_–≤—ã–∫–ª'])
async def wipeoff1(message: Message):
	user = await bot.api.users.get(message.from_id)
	if user[0].id == 567447984:
		db = sqlite3.connect('status.db')
		cursor = db.cursor()
		cursor.execute("SELECT status FROM onoff WHERE id = ?", (message.peer_id,))
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO onoff(status, id) VALUES(?,?)", (0, message.peer_id,))
			await message.reply("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 1:
			cursor.execute("UPDATE onoff SET status = ? WHERE id = ?", (0, message.peer_id,))
			await message.reply("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.")
		elif data[0] == 0:
			await message.reply("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
		db.commit()
		cursor.close()
		db.close()
	else:
		await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=['.eval <code>', '.eval'])
async def evl(ans: Message, code=None):
	user = await bot.api.users.get(ans.from_id)
	if user[0].id == 567447984:
		if code is not None:
			str_obj = io.StringIO() #Retrieves a stream of data
			try:
				with contextlib.redirect_stdout(str_obj):
					await aexec(code)
			except Exception as e:
				await ans.reply(f"{e.__class__.__name__}: {e}")
			if not str_obj.getvalue():
				await ans.reply(f'–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç!')
			else:
				await ans.reply(f'{str_obj.getvalue()}')
		else:
			await ans.reply(f'–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç.')
	else:
		await ans.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=".ghoul")
async def ghoul(ans: Message):
	user = await bot.api.users.get(ans.from_id)
	if user[0].id == 567447984:
		await ans.answer('–°–∫–∞–∂–∏ —Ç–µ–ø–µ—Ä—å')
		await asyncio.sleep(1)
		await ans.answer('–°–∫–∞–∂–∏ –º–Ω–µ —Ç–æ—á–Ω–æ')
		await asyncio.sleep(2)
		await ans.answer('–ö–∞–∫ –≤—Å—ë —ç—Ç–æ –ø–æ–Ω—è—Ç—å?')
		await asyncio.sleep(3)
		await ans.answer('–ö–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤–µ—Ä—å')
		await asyncio.sleep(1)
		await ans.answer('–ñ–∏–≤—ë—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è.')
		await asyncio.sleep(2)
		await ans.answer('–Ø —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —É–Ω–∏—á—Ç–æ–∂–µ–Ω')
		await asyncio.sleep(2)
		await ans.answer('–ï—Å—Ç—å –ª—ë–¥, –Ω–æ –Ω–µ—Ç –æ–≥–Ω—è.')
		await asyncio.sleep(1)
		await ans.answer('–ò –Ω–∞ –∏—Å—Ö–æ–¥–µ –¥–Ω—è')
		await asyncio.sleep(1)
		await ans.answer('–¢–≤–æ–µ–π —É–ª—ã–±–∫–∏ –¥–≤–µ—Ä—å.')
		await asyncio.sleep(3)
		await ans.answer('–ò–¥—É –≤–ø–µ—Ä—ë–¥ —è –Ω–µ —Å–ø–µ—à–∞')
		await asyncio.sleep(1)
		await ans.answer('–ú–Ω–µ —Ç—è–∂–µ–ª–æ –¥—ã—à–∞—Ç—å')
		await asyncio.sleep(1)
		await ans.answer('–ù–µ —Ä–∞–∑—Ä—É—à–∞–π –Ω–µ—Ç, –Ω–µ —Ä–∞–∑—Ä—É—à–∞–π!')
		await asyncio.sleep(1)
		await ans.answer('–ü–æ—Å–ª–µ –±—É–¥–µ—Ç –∂–∞–ª—å..')
		await asyncio.sleep(1)
		await ans.answer('–°—Ç–æ–π!')
		await asyncio.sleep(1)
		await ans.answer('–¢–æ —Å–∏–ª—å–Ω—ã–π —è, —Ç–æ —Å–ª–∞–± –≤–µ—Å—å–º–∞')
		await asyncio.sleep(1)
		await ans.answer('–°–ø–æ–∫–æ–π–Ω—ã–π, –Ω–æ —Å—Ö–æ–∂—É —Å —É–º–∞')
		await asyncio.sleep(1)
		await ans.answer('–í —Å–º—è—Ç–µ–Ω–∏–∏ –º–æ—è –¥—É—à–∞..')
		await asyncio.sleep(1)
		await ans.answer('–Ø –∑–¥–µ—Å—å, —è —Å—Ç–æ—é, —è –æ–¥–∏–Ω –≤ –∫—Ä—É–≥—É –ø–æ—Ä–æ—á–Ω–æ–º')
		await asyncio.sleep(2)
		await ans.answer('–î—É—à–∞ –ø—É—Å—Ç–∞, –º–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–µ–ø—Ä–æ—á–Ω—ã–π.')
		await asyncio.sleep(1)
		await ans.answer('–ù–µ —É—Å–ª–æ–∂–Ω—è–π –∂–µ –∏ –Ω–µ –∏—â–∏ –º–µ–Ω—è.')
		await asyncio.sleep(1)
		await ans.answer('–Ø –∑–Ω–∞—é —Ç–æ—á–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–í –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π –º–∏—Ä —è –ø–æ–ø–∞–ª –Ω–µ–≤–æ–ª—å–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–¢–µ–ø–µ—Ä—å –Ω–µ —Ö–æ—á—É —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –±–æ–ª—å–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–ù–æ –∏–Ω–æ–≥–¥–∞ —Ç—ã –≤—Å–ø–æ–º–∏–Ω–∞–π –º–µ–Ω—è')
		await asyncio.sleep(1)
		await ans.answer('–¢–∞–∫–∏–º, –∫–∞–∫–∏–º –±—ã–ª —è')
		await asyncio.sleep(1)
		await ans.answer('–Ø –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –≤–ø–ª–µ—Ç—ë–Ω')
		await asyncio.sleep(1)
		await ans.answer('–ö–∞–∫ –≤ —Å—Ç—Ä–∞–Ω–Ω—ã–π –∏ –±–µ–∑—É–º–Ω—ã–π —Å–æ–Ω')
		await asyncio.sleep(1)
		await ans.answer('–ò –ø–∞–º—è—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç')
		await asyncio.sleep(1)
		await ans.answer('–õ–∏—à—å —Ç–æ–ª—å–∫–æ —Ö–æ–ª–æ–¥–Ω—ã–π –±—Ä–µ–¥')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–î–≤–∏–∂–µ–Ω—å—è –Ω–µ—Ç!')
		await asyncio.sleep(1)
		await ans.answer('–ò —Ç–æ–ª—å–∫–æ –±—Ä–µ–¥!')
		await asyncio.sleep(3)
		await ans.answer('–Ø –≤ –º–∏—Ä–µ –Ω–µ–≤–∑—Ä–∞—á–Ω–æ–º')
		await asyncio.sleep(1)
		await ans.answer('–ù–µ–ª–µ–ø–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º')
		await asyncio.sleep(1)
		await ans.answer('–Ø —Å–∞–º –Ω–µ —Å–≤–æ–π, –≤–æ –º–Ω–µ –¥—Ä—É–≥–æ–π')
		await asyncio.sleep(1)
		await ans.answer('–û–Ω –º–Ω–µ —á—É–∂–æ–π, –Ω–æ –æ–Ω —Å–æ –º–Ω–æ–π')
		await asyncio.sleep(1)
		await ans.answer('–¢–æ —Å–∏–ª—å–Ω—ã–π —è, —Ç–æ —Å–ª–∞–± –≤–µ—Å—å–º–∞')
		await asyncio.sleep(1)
		await ans.answer('–°–ø–æ–∫–æ–π–Ω—ã–π, –Ω–æ —Å—Ö–æ–∂—É —Å —É–º–∞')
		await asyncio.sleep(1)
		await ans.answer('–í —Å–º—è—Ç–µ–Ω–∏–∏ –º–æ—è –¥—É—à–∞')
		await asyncio.sleep(3)
		await ans.answer('–¢–æ–ª—å–∫–æ')
		await asyncio.sleep(1)
		await ans.answer('–Ø –∑–¥–µ—Å—å, —è —Å—Ç–æ—é, —è –æ–¥–∏–Ω –≤ –∫—Ä—É–≥—É –ø–æ—Ä–æ—á–Ω–æ–º')
		await asyncio.sleep(1)
		await ans.answer('–î—É—à–∞ –ø—É—Å—Ç–∞, –º–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–µ–ø—Ä–æ—á–Ω—ã–π')
		await asyncio.sleep(1)
		await ans.answer('–ù–µ —É—Å–ª–æ–∂–Ω—è–π –∂–µ –∏ –Ω–µ –∏—â–∏ –º–µ–Ω—è')
		await asyncio.sleep(1)
		await ans.answer('–Ø –∑–Ω–∞—é —Ç–æ—á–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–í –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π –º–∏—Ä —è –ø–æ–ø–∞–ª –Ω–µ–≤–æ–ª—å–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–¢–µ–ø–µ—Ä—å –Ω–µ —Ö–æ—á—É —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –±–æ–ª—å–Ω–æ')
		await asyncio.sleep(1)
		await ans.answer('–ù–æ –∏–Ω–æ–≥–¥–∞ —Ç—ã –≤—Å–ø–æ–º–∏–Ω–∞–π –º–µ–Ω—è')
		await asyncio.sleep(1)
		await ans.answer('–¢–∞–∫–∏–º, –∫–∞–∫–∏–º –±—ã–ª —è..')
		await asyncio.sleep(3)
		await ans.answer('–¢—ã —Ç–æ–ª—å–∫–æ –ø–æ–º–Ω–∏.')
		await asyncio.sleep(1)
		await ans.answer('–¢—ã —Ç–æ–ª—å–∫–æ –ø–æ–º–Ω–∏.')
		await asyncio.sleep(1)
		await ans.answer('–¢—ã —Ç–æ–ª—å–∫–æ –ø–æ–º–Ω–∏.')
		await asyncio.sleep(1)
		await ans.answer('–¢—ã —Ç–æ–ª—å–∫–æ –ø–æ–º–Ω–∏.')
		await asyncio.sleep(1)
		await ans.answer('–ü—Ä–∏–º–∏ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å, —á—Ç–æ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å')
		await asyncio.sleep(1)
		await ans.answer('–ò –±–æ–≥–æ—Ç–≤–æ—Ä–∏, —á—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å')
		await asyncio.sleep(1)
		await ans.answer('–Ø —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à—É, –Ω–µ –∑–∞–±—ã–≤–∞–π –º–µ–Ω—è')
	else:
		await ans.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!")

@bot.on.chat_message(text=[".covid <country>",".covid"])
async def covid(ans: Message, country=None):
	if country is not None:
		datas = []
		r = await http.get(f"https://disease.sh/v3/covid-19/countries/{country.lower()}", res_method="json")

		if "message" in r:
			await ans.reply(f"API –æ—Ç–∫–ª–æ–Ω–∏–ª–æ –∑–∞–ø—Ä–æ—Å:\n{r['message']}")

		json_data = [
			("–°–ª—É—á–∞–µ–≤ –∑–∞—Ä–∞–∂–µ–Ω–∏—è", r["cases"]), ("–°–º–µ—Ä—Ç–µ–π", r["deaths"]),
			("–°–ª—É—á–∞–µ–≤ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è", r["recovered"]), ("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤", r["active"]),
			("–û–±—â–µ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", r["critical"]), ("–°–ª—É—á–∞–µ–≤ —Å–µ–≥–æ–¥–Ω—è", r["todayCases"]),
			("–£–º–µ—Ä–ª–∏ —Å–µ–≥–æ–¥–Ω—è", r["todayDeaths"]), ("–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è", r["todayRecovered"])
		]

		for name, value in json_data:
			datas.append(f"{name}: {value:,}")
		query = " \n‚ôª -------- üí¨\n".join(datas)

		await ans.reply(
			f"COVID-19: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {country.capitalize()}\n({r['countryInfo']['iso3']})\n\n{query}"
		)
	else:
		await ans.reply("–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç.")

@bot.on.chat_message(text=[".wanted"])
async def wanted(ans: Message):
	wanted = Image.open("IMG/imagemanipulation2.jpg")
	user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
	user_photo = user_ava[0].photo_max
	urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
	test = Image.open("IMG/vk-avatar.jpg")
	profilepic = test

	profilepic = profilepic.resize((423, 403))

	wanted.paste(profilepic, (98, 211))

	wanted.save("IMG/wantedpic.png")

	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload("IMG/wantedpic.png")
	await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".rip <text>",".rip"])
async def wanteddd(ans: Message, text=None):
	if text == None:
		rip = Image.open("IMG/manipulationcommand1.jpg")
		user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
		user_photo = user_ava[0].photo_max
		urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
		test = Image.open("IMG/vk-avatar.jpg")
		profilepic = test
		profilepic = profilepic.resize((145, 139))
		rip.paste(profilepic, (108, 73))
		rip.save("IMG/rippic.png")
		photo_upd = PhotoMessageUploader(bot.api)
		photo = await photo_upd.upload("IMG/rippic.png")
		await ans.reply("", attachment=photo)
	else:
		rip = Image.open("IMG/manipulationcommand1.jpg")
		user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
		user_photo = user_ava[0].photo_max
		urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
		test = Image.open("IMG/vk-avatar.jpg")
		profilepic = test
		profilepic = profilepic.resize((145, 139))
		idraw = ImageDraw.Draw(rip)
		headline = ImageFont.truetype('fonts/sans.otf', size = 12)
		idraw.text((97, 233), text, font = headline, fill="#000")
		rip.paste(profilepic, (108, 73))
		rip.save("IMG/rippictext.png")
		photo_upd = PhotoMessageUploader(bot.api)
		photo = await photo_upd.upload("IMG/rippictext.png")
		await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".fire"])
async def wanted1231(ans: Message):
	rip = Image.open("IMG/fire.jpg")

	user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
	user_photo = user_ava[0].photo_max
	urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
	test = Image.open("IMG/vk-avatar.jpg")
	profilepic = test

	profilepic = profilepic.resize((228, 238))

	rip.paste(profilepic, (398, 98))

	rip.save("IMG/firepic.png")
	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload("IMG/firepic.png")

	await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".duck"])
async def wanted1233241(ans: Message):
	rip = Image.open("IMG/duck.jpg")

	user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
	user_photo = user_ava[0].photo_max
	urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
	test = Image.open("IMG/vk-avatar.jpg")
	profilepic = test

	profilepic = profilepic.resize((389, 392))

	rip.paste(profilepic, (152, 101))

	rip.save("IMG/duckpic.png")
	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload("IMG/duckpic.png")

	await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".cat"])
async def wanted123323241(ans: Message):
	rip = Image.open("IMG/cat.jpg")

	user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
	user_photo = user_ava[0].photo_max
	urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
	test = Image.open("IMG/vk-avatar.jpg")
	profilepic = test

	profilepic = profilepic.resize((498, 432))

	rip.paste(profilepic, (388, 262))

	rip.save("IMG/catpic.png")
	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload("IMG/catpic.png")

	await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".wtf"])
async def wanted1233243433241(ans: Message):
	rip = Image.open("IMG/wtf.png")

	user_ava = await bot.api.users.get(user_ids=ans.from_id, fields='photo_max')
	user_photo = user_ava[0].photo_max
	urllib.request.urlretrieve(f"{user_photo}", "IMG/vk-avatar.jpg")
	test = Image.open("IMG/vk-avatar.jpg")
	profilepic = test

	profilepic = profilepic.resize((339, 335))

	rip.paste(profilepic, (449, 232))

	rip.save("IMG/wtfpic.png")
	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload("IMG/wtfpic.png")

	await ans.reply("", attachment=photo)

@bot.on.chat_message(text=[".–∫–º—É—Ä"])
async def cmur(ans: Message):
	user = await bot.api.users.get(ans.from_id)
	idlist = [527269527]
	if user[0].id in idlist:
		await ans.reply('–ö–º—É—Ä –∫—Ä—É—Ç–æ–π!!!')
	else:
		await ans.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Ç—ã –Ω–µ –ö–º—É—Ä!")

@bot.on.chat_message(text=[".–∫—Ç–æ —è –Ω–∞ vc"]) #white - , rocksoft - , sasha_3345 - , niekorun - , teket4 - , volgare - , shemivet - , zxctrueinside - 
async def ktoya(ans: Message):
	user = await bot.api.users.get(ans.from_id)
	if user[0].id == 527269527:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã cmur123')
	elif user[0].id == 567447984:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã greenMachine1123')
	elif user[0].id == 271024044:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã white (whitebelyash)')
	elif user[0].id == 471559882:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã rocksoft')
	elif user[0].id == 447956362:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã sasha_3345 (–ª–æ—Ö)')
	elif user[0].id == 694223618:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã Niekorun')
	elif user[0].id == 303794271:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã teket4')
	elif user[0].id == 259697642:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã Volgare')
	elif user[0].id == 490661431:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã Sheminet')
	elif user[0].id == 572971816:
		await ans.reply(f'@id{user[0].id} ({user[0].first_name}), —Ç—ã zxctrueinside')
	else:
		await ans.reply(f"@id{user[0].id} ({user[0].first_name}), —Ç—ã –Ω–Ω (—è —Ä–∏–ª —Ö–∑ –∫—Ç–æ —Ç—ã).")

@bot.on.chat_message(text=[".yt <word>",".yt"])
async def sayword(ans: Message, word=None):
	user = await bot.api.users.get(ans.from_id)
	if user[0].id != 490661431:
		if word is not None:
			query_string = urllib.parse.urlencode({
				"search_query": word
			})
			html_content = urllib.request.urlopen(
				"http://www.youtube.com/results?" + query_string
			)
			search_results = re.findall(r"watch\?v=(\S{11})", html_content.read().decode())
			await ans.reply("http://www.youtube.com/watch?v=" + search_results[0])
		else:
			pass
	else:
		pass

@bot.on.message(text=[".–º–∞–π–Ω–≤–∏–∫–∏ <question>",".–º–∞–π–Ω–≤–∏–∫–∏"])
async def e8ball3342(message: Message, question=None):
	user = await bot.api.users.get(message.from_id)
	fandom.set_wiki("Minecraft")
	fandom.set_lang("ru")
	if user[0].id != 490661431:
		if question is not None:
			try:
				query = fandom.page(question)
				title = query.title
				url = query.url
				summary = fandom.summary(f"{question}", "Minecraft", sentences=50)
				await message.reply(f"{title}\n\n{summary}. . .\n\n–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ:\n{url}")
			except:
				await message.reply(f"üé≤ @id{user[0].id} ({user[0].first_name}), —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		else:
			await message.reply(f"@id{user[0].id} ({user[0].first_name}), –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç!")
	else:
		pass

@bot.on.chat_message()
async def chat_message(ans: Message):
	db = sqlite3.connect('status.db')
	cursor = db.cursor()
	cursor.execute("SELECT status FROM onoff WHERE id = ?", (ans.peer_id,))
	data = cursor.fetchone()
	if data[0] == 1:
		await addtobd(ans.peer_id)
		if len(ans.text) <= 60 and ans.text != '' and ans.from_id > 0 and ans.text[:3] != '[id' and ans.text[:1] != '!': # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			with open(dir_to_txt + str(ans.peer_id) + '.txt', "a", encoding="utf8") as f:
				f.write(ans.text + ",")
			with open(dir_to_txt + str(ans.peer_id) + '.txt', encoding="utf8") as file:
				txt = file.read().split(",")
			if len(txt) >= 4 and random.randint(0, 2) == 0:
				generator = random.choice(txt)
				message = generator
				if message == '':
					return "—á–µ"
				await ans.answer(message.lower())
	else:
		pass

if __name__ == '__main__':
	main_loop()
	print('–Ø –∂–∏–≤!') 
	bot.run_forever()